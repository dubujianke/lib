#include <atomic>
#include <memory>
#include <thread>

template <typename T>
class DoubleBuffer {
public:
    DoubleBuffer() {
        m_buffer1 = std::make_unique<T>();
        m_buffer2 = std::make_unique<T>();
        m_readPtr.store(m_buffer1.get(), std::memory_order_relaxed);
    }

    // 获取写缓冲区指针（非线程安全，仅限写线程调用）
    T* get_write_buffer() {
        return (m_readPtr.load(std::memory_order_relaxed) == m_buffer1.get()) ? m_buffer2.get() : m_buffer1.get();
    }

    // 写线程调用：写入后交换缓冲区
    void publish() {
        T* newReadPtr = get_write_buffer();
        m_readPtr.store(newReadPtr, std::memory_order_release);
    }

    // 读线程调用：获取当前读缓冲区的内容（只读）
    const T* get_read_buffer() const {
        return m_readPtr.load(std::memory_order_acquire);
    }

private:
    std::unique_ptr<T> m_buffer1;
    std::unique_ptr<T> m_buffer2;
    std::atomic<T*> m_readPtr;
};
📦 示例用法（主线程写，子线程读）
cpp
复制
编辑
#include <iostream>
#include <chrono>

DoubleBuffer<int[4]> buffer;

void writer() {
    for (int i = 0; i < 10; ++i) {
        int* wbuf = buffer.get_write_buffer();
        for (int j = 0; j < 4; ++j) {
            wbuf[j] = i * 10 + j;
        }
        buffer.publish();
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}

void reader() {
    for (int i = 0; i < 10; ++i) {
        const int* rbuf = buffer.get_read_buffer();
        std::cout << "Read:";
        for (int j = 0; j < 4; ++j) {
            std::cout << " " << rbuf[j];
        }
        std::cout << std::endl;
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
}

int main() {
    std::thread t1(writer);
    std::thread t2(reader);
    t1.join();
    t2.join();
    return 0;
}